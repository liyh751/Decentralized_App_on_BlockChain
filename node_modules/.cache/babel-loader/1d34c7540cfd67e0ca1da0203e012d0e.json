{"ast":null,"code":"// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar util = require('core-util-is');\n\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Buffer = require('safe-buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*</replacement>*/\n\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  var isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm; // cast to ints.\n\n  this.highWaterMark = Math.floor(this.highWaterMark); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb\n\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      stream.emit('error', err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};","map":{"version":3,"names":["pna","require","module","exports","Writable","WriteReq","chunk","encoding","cb","callback","next","CorkedRequest","state","_this","entry","finish","onCorkedFinish","asyncWrite","process","browser","indexOf","version","slice","setImmediate","nextTick","Duplex","WritableState","util","inherits","internalUtil","deprecate","Stream","Buffer","OurUint8Array","global","Uint8Array","_uint8ArrayToBuffer","from","_isUint8Array","obj","isBuffer","destroyImpl","nop","options","stream","isDuplex","objectMode","writableObjectMode","hwm","highWaterMark","writableHwm","writableHighWaterMark","defaultHwm","Math","floor","finalCalled","needDrain","ending","ended","finished","destroyed","noDecode","decodeStrings","defaultEncoding","length","writing","corked","sync","bufferProcessing","onwrite","er","writecb","writelen","bufferedRequest","lastBufferedRequest","pendingcb","prefinished","errorEmitted","bufferedRequestCount","corkedRequestsFree","prototype","getBuffer","current","out","push","Object","defineProperty","get","_","realHasInstance","Symbol","hasInstance","Function","value","object","call","_writableState","writable","write","_write","writev","_writev","destroy","_destroy","final","_final","pipe","emit","Error","writeAfterEnd","validChunk","valid","TypeError","undefined","ret","isBuf","writeOrBuffer","cork","uncork","clearBuffer","setDefaultEncoding","toLowerCase","decodeChunk","enumerable","newChunk","len","last","doWrite","onwriteError","finishMaybe","onwriteStateUpdate","needFinish","afterWrite","onwriteDrain","l","buffer","Array","holder","count","allBuffers","end","endWritable","callFinal","err","prefinish","need","once","corkReq","set","_undestroy","undestroy"],"sources":["/Users/zhuyihan/Downloads/patronus/node_modules/stream-http/node_modules/readable-stream/lib/_stream_writable.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}