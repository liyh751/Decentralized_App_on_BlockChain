{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseTransaction = void 0;\n\nvar common_1 = __importStar(require(\"@ethereumjs/common\"));\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar types_1 = require(\"./types\");\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\n\n\nvar BaseTransaction =\n/** @class */\nfunction () {\n  function BaseTransaction(txData) {\n    this.cache = {\n      hash: undefined\n    };\n    /**\n     * List of tx type defining EIPs,\n     * e.g. 1559 (fee market) and 2930 (access lists)\n     * for FeeMarketEIP1559Transaction objects\n     */\n\n    this.activeCapabilities = [];\n    /**\n     * The default chain the tx falls back to if no Common\n     * is provided and if the chain can't be derived from\n     * a passed in chainId (only EIP-2718 typed txs) or\n     * EIP-155 signature (legacy txs).\n     *\n     * @hidden\n     */\n\n    this.DEFAULT_CHAIN = common_1.Chain.Mainnet;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n\n    this.DEFAULT_HARDFORK = common_1.Hardfork.Istanbul;\n    var nonce = txData.nonce,\n        gasLimit = txData.gasLimit,\n        to = txData.to,\n        value = txData.value,\n        data = txData.data,\n        v = txData.v,\n        r = txData.r,\n        s = txData.s,\n        type = txData.type;\n    this._type = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(type)).toNumber();\n    var toB = (0, ethereumjs_util_1.toBuffer)(to === '' ? '0x' : to);\n    var vB = (0, ethereumjs_util_1.toBuffer)(v === '' ? '0x' : v);\n    var rB = (0, ethereumjs_util_1.toBuffer)(r === '' ? '0x' : r);\n    var sB = (0, ethereumjs_util_1.toBuffer)(s === '' ? '0x' : s);\n    this.nonce = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(nonce === '' ? '0x' : nonce));\n    this.gasLimit = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasLimit === '' ? '0x' : gasLimit));\n    this.to = toB.length > 0 ? new ethereumjs_util_1.Address(toB) : undefined;\n    this.value = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(value === '' ? '0x' : value));\n    this.data = (0, ethereumjs_util_1.toBuffer)(data === '' ? '0x' : data);\n    this.v = vB.length > 0 ? new ethereumjs_util_1.BN(vB) : undefined;\n    this.r = rB.length > 0 ? new ethereumjs_util_1.BN(rB) : undefined;\n    this.s = sB.length > 0 ? new ethereumjs_util_1.BN(sB) : undefined;\n\n    this._validateCannotExceedMaxInteger({\n      nonce: this.nonce,\n      gasLimit: this.gasLimit,\n      value: this.value,\n      r: this.r,\n      s: this.s\n    });\n  }\n\n  Object.defineProperty(BaseTransaction.prototype, \"transactionType\", {\n    /**\n     * Alias for {@link BaseTransaction.type}\n     *\n     * @deprecated Use `type` instead\n     */\n    get: function () {\n      return this.type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BaseTransaction.prototype, \"type\", {\n    /**\n     * Returns the transaction type.\n     *\n     * Note: legacy txs will return tx type `0`.\n     */\n    get: function () {\n      return this._type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Checks if a tx type defining capability is active\n   * on a tx, for example the EIP-1559 fee market mechanism\n   * or the EIP-2930 access list feature.\n   *\n   * Note that this is different from the tx type itself,\n   * so EIP-2930 access lists can very well be active\n   * on an EIP-1559 tx for example.\n   *\n   * This method can be useful for feature checks if the\n   * tx type is unknown (e.g. when instantiated with\n   * the tx factory).\n   *\n   * See `Capabilites` in the `types` module for a reference\n   * on all supported capabilities.\n   */\n\n  BaseTransaction.prototype.supports = function (capability) {\n    return this.activeCapabilities.includes(capability);\n  };\n\n  BaseTransaction.prototype.validate = function (stringError) {\n    if (stringError === void 0) {\n      stringError = false;\n    }\n\n    var errors = [];\n\n    if (this.getBaseFee().gt(this.gasLimit)) {\n      errors.push(\"gasLimit is too low. given \" + this.gasLimit + \", need at least \" + this.getBaseFee());\n    }\n\n    if (this.isSigned() && !this.verifySignature()) {\n      errors.push('Invalid Signature');\n    }\n\n    return stringError ? errors : errors.length === 0;\n  };\n  /**\n   * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n\n\n  BaseTransaction.prototype.getBaseFee = function () {\n    var fee = this.getDataFee().addn(this.common.param('gasPrices', 'tx'));\n\n    if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n      fee.iaddn(this.common.param('gasPrices', 'txCreation'));\n    }\n\n    return fee;\n  };\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n\n\n  BaseTransaction.prototype.getDataFee = function () {\n    var txDataZero = this.common.param('gasPrices', 'txDataZero');\n    var txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n    var cost = 0;\n\n    for (var i = 0; i < this.data.length; i++) {\n      this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;\n    }\n\n    return new ethereumjs_util_1.BN(cost);\n  };\n  /**\n   * If the tx's `to` is to the creation address\n   */\n\n\n  BaseTransaction.prototype.toCreationAddress = function () {\n    return this.to === undefined || this.to.buf.length === 0;\n  };\n\n  BaseTransaction.prototype.isSigned = function () {\n    var _a = this,\n        v = _a.v,\n        r = _a.r,\n        s = _a.s;\n\n    if (this.type === 0) {\n      if (!v || !r || !s) {\n        return false;\n      } else {\n        return true;\n      }\n    } else {\n      if (v === undefined || !r || !s) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  };\n  /**\n   * Determines if the signature is valid\n   */\n\n\n  BaseTransaction.prototype.verifySignature = function () {\n    try {\n      // Main signature verification is done in `getSenderPublicKey()`\n      var publicKey = this.getSenderPublicKey();\n      return (0, ethereumjs_util_1.unpadBuffer)(publicKey).length !== 0;\n    } catch (e) {\n      return false;\n    }\n  };\n  /**\n   * Returns the sender's address\n   */\n\n\n  BaseTransaction.prototype.getSenderAddress = function () {\n    return new ethereumjs_util_1.Address((0, ethereumjs_util_1.publicToAddress)(this.getSenderPublicKey()));\n  };\n  /**\n   * Signs a transaction.\n   *\n   * Note that the signed tx is returned as a new object,\n   * use as follows:\n   * ```javascript\n   * const signedTx = tx.sign(privateKey)\n   * ```\n   */\n\n\n  BaseTransaction.prototype.sign = function (privateKey) {\n    if (privateKey.length !== 32) {\n      throw new Error('Private key must be 32 bytes in length.');\n    } // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n    // and want to recreate a signature (where EIP155 should be applied)\n    // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n    // 2021-06-23\n\n\n    var hackApplied = false;\n\n    if (this.type === 0 && this.common.gteHardfork('spuriousDragon') && !this.supports(types_1.Capability.EIP155ReplayProtection)) {\n      this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n      hackApplied = true;\n    }\n\n    var msgHash = this.getMessageToSign(true);\n\n    var _a = (0, ethereumjs_util_1.ecsign)(msgHash, privateKey),\n        v = _a.v,\n        r = _a.r,\n        s = _a.s;\n\n    var tx = this._processSignature(v, r, s); // Hack part 2\n\n\n    if (hackApplied) {\n      var index = this.activeCapabilities.indexOf(types_1.Capability.EIP155ReplayProtection);\n\n      if (index > -1) {\n        this.activeCapabilities.splice(index, 1);\n      }\n    }\n\n    return tx;\n  };\n  /**\n   * Does chain ID checks on common and returns a common\n   * to be used on instantiation\n   * @hidden\n   *\n   * @param common - {@link Common} instance from tx options\n   * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n   */\n\n\n  BaseTransaction.prototype._getCommon = function (common, chainId) {\n    var _a; // Chain ID provided\n\n\n    if (chainId) {\n      var chainIdBN = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(chainId));\n\n      if (common) {\n        if (!common.chainIdBN().eq(chainIdBN)) {\n          throw new Error('The chain ID does not match the chain ID of Common');\n        } // Common provided, chain ID does match\n        // -> Return provided Common\n\n\n        return common.copy();\n      } else {\n        if (common_1.default.isSupportedChainId(chainIdBN)) {\n          // No Common, chain ID supported by Common\n          // -> Instantiate Common with chain ID\n          return new common_1.default({\n            chain: chainIdBN,\n            hardfork: this.DEFAULT_HARDFORK\n          });\n        } else {\n          // No Common, chain ID not supported by Common\n          // -> Instantiate custom Common derived from DEFAULT_CHAIN\n          return common_1.default.forCustomChain(this.DEFAULT_CHAIN, {\n            name: 'custom-chain',\n            networkId: chainIdBN,\n            chainId: chainIdBN\n          }, this.DEFAULT_HARDFORK);\n        }\n      }\n    } else {\n      // No chain ID provided\n      // -> return Common provided or create new default Common\n      return (_a = common === null || common === void 0 ? void 0 : common.copy()) !== null && _a !== void 0 ? _a : new common_1.default({\n        chain: this.DEFAULT_CHAIN,\n        hardfork: this.DEFAULT_HARDFORK\n      });\n    }\n  };\n\n  BaseTransaction.prototype._validateCannotExceedMaxInteger = function (values, bits) {\n    var e_1, _a;\n\n    if (bits === void 0) {\n      bits = 53;\n    }\n\n    try {\n      for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n            key = _d[0],\n            value = _d[1];\n\n        if (bits === 53) {\n          if (value === null || value === void 0 ? void 0 : value.gt(ethereumjs_util_1.MAX_INTEGER)) {\n            throw new Error(key + \" cannot exceed MAX_INTEGER, given \" + value);\n          }\n        } else if (bits === 256) {\n          if (value === null || value === void 0 ? void 0 : value.gte(ethereumjs_util_1.TWO_POW256)) {\n            throw new Error(key + \" must be less than 2^256, given \" + value);\n          }\n        } else {\n          throw new Error('unimplemented bits value');\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  return BaseTransaction;\n}();\n\nexports.BaseTransaction = BaseTransaction;","map":{"version":3,"sources":["../src/baseTransaction.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,QAAA,GAAA,YAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAWA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;AAeA;;;;;;AAMG;;;AACH,IAAA,eAAA;AAAA;AAAA,YAAA;EA4CE,SAAA,eAAA,CAAY,MAAZ,EAA6E;IA7BnE,KAAA,KAAA,GAA0B;MAClC,IAAI,EAAE;IAD4B,CAA1B;IAIV;;;;AAIG;;IACO,KAAA,kBAAA,GAA+B,EAA/B;IAEV;;;;;;;AAOG;;IACO,KAAA,aAAA,GAAgB,QAAA,CAAA,KAAA,CAAM,OAAtB;IAEV;;;;;AAKG;;IACO,KAAA,gBAAA,GAAsC,QAAA,CAAA,QAAA,CAAS,QAA/C;IAGA,IAAA,KAAK,GAA+C,MAAM,CAArD,KAAL;IAAA,IAAO,QAAQ,GAAqC,MAAM,CAA3C,QAAf;IAAA,IAAiB,EAAE,GAAiC,MAAM,CAAvC,EAAnB;IAAA,IAAqB,KAAK,GAA0B,MAAM,CAAhC,KAA1B;IAAA,IAA4B,IAAI,GAAoB,MAAM,CAA1B,IAAhC;IAAA,IAAkC,CAAC,GAAiB,MAAM,CAAvB,CAAnC;IAAA,IAAqC,CAAC,GAAc,MAAM,CAApB,CAAtC;IAAA,IAAwC,CAAC,GAAW,MAAM,CAAjB,CAAzC;IAAA,IAA2C,IAAI,GAAK,MAAM,CAAX,IAA/C;IACR,KAAK,KAAL,GAAa,IAAI,iBAAA,CAAA,EAAJ,CAAO,CAAA,GAAA,iBAAA,CAAA,QAAA,EAAS,IAAT,CAAP,EAAuB,QAAvB,EAAb;IAEA,IAAM,GAAG,GAAG,CAAA,GAAA,iBAAA,CAAA,QAAA,EAAS,EAAE,KAAK,EAAP,GAAY,IAAZ,GAAmB,EAA5B,CAAZ;IACA,IAAM,EAAE,GAAG,CAAA,GAAA,iBAAA,CAAA,QAAA,EAAS,CAAC,KAAK,EAAN,GAAW,IAAX,GAAkB,CAA3B,CAAX;IACA,IAAM,EAAE,GAAG,CAAA,GAAA,iBAAA,CAAA,QAAA,EAAS,CAAC,KAAK,EAAN,GAAW,IAAX,GAAkB,CAA3B,CAAX;IACA,IAAM,EAAE,GAAG,CAAA,GAAA,iBAAA,CAAA,QAAA,EAAS,CAAC,KAAK,EAAN,GAAW,IAAX,GAAkB,CAA3B,CAAX;IAEA,KAAK,KAAL,GAAa,IAAI,iBAAA,CAAA,EAAJ,CAAO,CAAA,GAAA,iBAAA,CAAA,QAAA,EAAS,KAAK,KAAK,EAAV,GAAe,IAAf,GAAsB,KAA/B,CAAP,CAAb;IACA,KAAK,QAAL,GAAgB,IAAI,iBAAA,CAAA,EAAJ,CAAO,CAAA,GAAA,iBAAA,CAAA,QAAA,EAAS,QAAQ,KAAK,EAAb,GAAkB,IAAlB,GAAyB,QAAlC,CAAP,CAAhB;IACA,KAAK,EAAL,GAAU,GAAG,CAAC,MAAJ,GAAa,CAAb,GAAiB,IAAI,iBAAA,CAAA,OAAJ,CAAY,GAAZ,CAAjB,GAAoC,SAA9C;IACA,KAAK,KAAL,GAAa,IAAI,iBAAA,CAAA,EAAJ,CAAO,CAAA,GAAA,iBAAA,CAAA,QAAA,EAAS,KAAK,KAAK,EAAV,GAAe,IAAf,GAAsB,KAA/B,CAAP,CAAb;IACA,KAAK,IAAL,GAAY,CAAA,GAAA,iBAAA,CAAA,QAAA,EAAS,IAAI,KAAK,EAAT,GAAc,IAAd,GAAqB,IAA9B,CAAZ;IAEA,KAAK,CAAL,GAAS,EAAE,CAAC,MAAH,GAAY,CAAZ,GAAgB,IAAI,iBAAA,CAAA,EAAJ,CAAO,EAAP,CAAhB,GAA6B,SAAtC;IACA,KAAK,CAAL,GAAS,EAAE,CAAC,MAAH,GAAY,CAAZ,GAAgB,IAAI,iBAAA,CAAA,EAAJ,CAAO,EAAP,CAAhB,GAA6B,SAAtC;IACA,KAAK,CAAL,GAAS,EAAE,CAAC,MAAH,GAAY,CAAZ,GAAgB,IAAI,iBAAA,CAAA,EAAJ,CAAO,EAAP,CAAhB,GAA6B,SAAtC;;IAEA,KAAK,+BAAL,CAAqC;MACnC,KAAK,EAAE,KAAK,KADuB;MAEnC,QAAQ,EAAE,KAAK,QAFoB;MAGnC,KAAK,EAAE,KAAK,KAHuB;MAInC,CAAC,EAAE,KAAK,CAJ2B;MAKnC,CAAC,EAAE,KAAK;IAL2B,CAArC;EAOD;;EAOD,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,iBAAJ,EAAmB;IALnB;;;;AAIG;SACH,YAAA;MACE,OAAO,KAAK,IAAZ;IACD,CAFkB;qBAAA;;EAAA,CAAnB;EASA,MAAA,CAAA,cAAA,CAAI,eAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;IALR;;;;AAIG;SACH,YAAA;MACE,OAAO,KAAK,KAAZ;IACD,CAFO;qBAAA;;EAAA,CAAR;EAIA;;;;;;;;;;;;;;;AAeG;;EACH,eAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,UAAT,EAA+B;IAC7B,OAAO,KAAK,kBAAL,CAAwB,QAAxB,CAAiC,UAAjC,CAAP;EACD,CAFD;;EAWA,eAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,WAAT,EAAqC;IAA5B,IAAA,WAAA,KAAA,KAAA,CAAA,EAAA;MAAA,WAAA,GAAA,KAAA;IAA4B;;IACnC,IAAM,MAAM,GAAG,EAAf;;IAEA,IAAI,KAAK,UAAL,GAAkB,EAAlB,CAAqB,KAAK,QAA1B,CAAJ,EAAyC;MACvC,MAAM,CAAC,IAAP,CAAY,gCAA8B,KAAK,QAAnC,GAA2C,kBAA3C,GAA8D,KAAK,UAAL,EAA1E;IACD;;IAED,IAAI,KAAK,QAAL,MAAmB,CAAC,KAAK,eAAL,EAAxB,EAAgD;MAC9C,MAAM,CAAC,IAAP,CAAY,mBAAZ;IACD;;IAED,OAAO,WAAW,GAAG,MAAH,GAAY,MAAM,CAAC,MAAP,KAAkB,CAAhD;EACD,CAZD;EAcA;;AAEG;;;EACH,eAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;IACE,IAAM,GAAG,GAAG,KAAK,UAAL,GAAkB,IAAlB,CAAuB,KAAK,MAAL,CAAY,KAAZ,CAAkB,WAAlB,EAA+B,IAA/B,CAAvB,CAAZ;;IACA,IAAI,KAAK,MAAL,CAAY,WAAZ,CAAwB,WAAxB,KAAwC,KAAK,iBAAL,EAA5C,EAAsE;MACpE,GAAG,CAAC,KAAJ,CAAU,KAAK,MAAL,CAAY,KAAZ,CAAkB,WAAlB,EAA+B,YAA/B,CAAV;IACD;;IACD,OAAO,GAAP;EACD,CAND;EAQA;;AAEG;;;EACH,eAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;IACE,IAAM,UAAU,GAAG,KAAK,MAAL,CAAY,KAAZ,CAAkB,WAAlB,EAA+B,YAA/B,CAAnB;IACA,IAAM,aAAa,GAAG,KAAK,MAAL,CAAY,KAAZ,CAAkB,WAAlB,EAA+B,eAA/B,CAAtB;IAEA,IAAI,IAAI,GAAG,CAAX;;IACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,IAAL,CAAU,MAA9B,EAAsC,CAAC,EAAvC,EAA2C;MACzC,KAAK,IAAL,CAAU,CAAV,MAAiB,CAAjB,GAAsB,IAAI,IAAI,UAA9B,GAA6C,IAAI,IAAI,aAArD;IACD;;IACD,OAAO,IAAI,iBAAA,CAAA,EAAJ,CAAO,IAAP,CAAP;EACD,CATD;EAgBA;;AAEG;;;EACH,eAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;IACE,OAAO,KAAK,EAAL,KAAY,SAAZ,IAAyB,KAAK,EAAL,CAAQ,GAAR,CAAY,MAAZ,KAAuB,CAAvD;EACD,CAFD;;EAgCO,eAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;IACQ,IAAA,EAAA,GAAc,IAAd;IAAA,IAAE,CAAC,GAAA,EAAA,CAAA,CAAH;IAAA,IAAK,CAAC,GAAA,EAAA,CAAA,CAAN;IAAA,IAAQ,CAAC,GAAA,EAAA,CAAA,CAAT;;IACN,IAAI,KAAK,IAAL,KAAc,CAAlB,EAAqB;MACnB,IAAI,CAAC,CAAD,IAAM,CAAC,CAAP,IAAY,CAAC,CAAjB,EAAoB;QAClB,OAAO,KAAP;MACD,CAFD,MAEO;QACL,OAAO,IAAP;MACD;IACF,CAND,MAMO;MACL,IAAI,CAAC,KAAK,SAAN,IAAmB,CAAC,CAApB,IAAyB,CAAC,CAA9B,EAAiC;QAC/B,OAAO,KAAP;MACD,CAFD,MAEO;QACL,OAAO,IAAP;MACD;IACF;EACF,CAfM;EAiBP;;AAEG;;;EACH,eAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;IACE,IAAI;MACF;MACA,IAAM,SAAS,GAAG,KAAK,kBAAL,EAAlB;MACA,OAAO,CAAA,GAAA,iBAAA,CAAA,WAAA,EAAY,SAAZ,EAAuB,MAAvB,KAAkC,CAAzC;IACD,CAJD,CAIE,OAAO,CAAP,EAAe;MACf,OAAO,KAAP;IACD;EACF,CARD;EAUA;;AAEG;;;EACH,eAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;IACE,OAAO,IAAI,iBAAA,CAAA,OAAJ,CAAY,CAAA,GAAA,iBAAA,CAAA,eAAA,EAAgB,KAAK,kBAAL,EAAhB,CAAZ,CAAP;EACD,CAFD;EASA;;;;;;;;AAQG;;;EACH,eAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,UAAL,EAAuB;IACrB,IAAI,UAAU,CAAC,MAAX,KAAsB,EAA1B,EAA8B;MAC5B,MAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;IACD,CAHoB,CAKrB;IACA;IACA;IACA;;;IACA,IAAI,WAAW,GAAG,KAAlB;;IACA,IACE,KAAK,IAAL,KAAc,CAAd,IACA,KAAK,MAAL,CAAY,WAAZ,CAAwB,gBAAxB,CADA,IAEA,CAAC,KAAK,QAAL,CAAc,OAAA,CAAA,UAAA,CAAW,sBAAzB,CAHH,EAIE;MACA,KAAK,kBAAL,CAAwB,IAAxB,CAA6B,OAAA,CAAA,UAAA,CAAW,sBAAxC;MACA,WAAW,GAAG,IAAd;IACD;;IAED,IAAM,OAAO,GAAG,KAAK,gBAAL,CAAsB,IAAtB,CAAhB;;IACM,IAAA,EAAA,GAAc,CAAA,GAAA,iBAAA,CAAA,MAAA,EAAO,OAAP,EAAgB,UAAhB,CAAd;IAAA,IAAE,CAAC,GAAA,EAAA,CAAA,CAAH;IAAA,IAAK,CAAC,GAAA,EAAA,CAAA,CAAN;IAAA,IAAQ,CAAC,GAAA,EAAA,CAAA,CAAT;;IACN,IAAM,EAAE,GAAG,KAAK,iBAAL,CAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B,CAAX,CArBqB,CAuBrB;;;IACA,IAAI,WAAJ,EAAiB;MACf,IAAM,KAAK,GAAG,KAAK,kBAAL,CAAwB,OAAxB,CAAgC,OAAA,CAAA,UAAA,CAAW,sBAA3C,CAAd;;MACA,IAAI,KAAK,GAAG,CAAC,CAAb,EAAgB;QACd,KAAK,kBAAL,CAAwB,MAAxB,CAA+B,KAA/B,EAAsC,CAAtC;MACD;IACF;;IAED,OAAO,EAAP;EACD,CAhCD;EA0CA;;;;;;;AAOG;;;EACO,eAAA,CAAA,SAAA,CAAA,UAAA,GAAV,UAAqB,MAArB,EAAsC,OAAtC,EAAsD;WAAA,CACpD;;;IACA,IAAI,OAAJ,EAAa;MACX,IAAM,SAAS,GAAG,IAAI,iBAAA,CAAA,EAAJ,CAAO,CAAA,GAAA,iBAAA,CAAA,QAAA,EAAS,OAAT,CAAP,CAAlB;;MACA,IAAI,MAAJ,EAAY;QACV,IAAI,CAAC,MAAM,CAAC,SAAP,GAAmB,EAAnB,CAAsB,SAAtB,CAAL,EAAuC;UACrC,MAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;QACD,CAHS,CAIV;QACA;;;QACA,OAAO,MAAM,CAAC,IAAP,EAAP;MACD,CAPD,MAOO;QACL,IAAI,QAAA,CAAA,OAAA,CAAO,kBAAP,CAA0B,SAA1B,CAAJ,EAA0C;UACxC;UACA;UACA,OAAO,IAAI,QAAA,CAAA,OAAJ,CAAW;YAAE,KAAK,EAAE,SAAT;YAAoB,QAAQ,EAAE,KAAK;UAAnC,CAAX,CAAP;QACD,CAJD,MAIO;UACL;UACA;UACA,OAAO,QAAA,CAAA,OAAA,CAAO,cAAP,CACL,KAAK,aADA,EAEL;YACE,IAAI,EAAE,cADR;YAEE,SAAS,EAAE,SAFb;YAGE,OAAO,EAAE;UAHX,CAFK,EAOL,KAAK,gBAPA,CAAP;QASD;MACF;IACF,CA5BD,MA4BO;MACL;MACA;MACA,OACE,CAAA,EAAA,GAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,IAAR,EAAA,MAAc,IAAd,IAAc,EAAA,KAAA,KAAA,CAAd,GAAc,EAAd,GAAkB,IAAI,QAAA,CAAA,OAAJ,CAAW;QAAE,KAAK,EAAE,KAAK,aAAd;QAA6B,QAAQ,EAAE,KAAK;MAA5C,CAAX,CADpB;IAGD;EACF,CArCS;;EAuCA,eAAA,CAAA,SAAA,CAAA,+BAAA,GAAV,UAA0C,MAA1C,EAAqF,IAArF,EAA8F;;;IAAT,IAAA,IAAA,KAAA,KAAA,CAAA,EAAA;MAAA,IAAA,GAAA,EAAA;IAAS;;;MAC5F,KAA2B,IAAA,EAAA,GAAA,QAAA,CAAA,MAAM,CAAC,OAAP,CAAe,MAAf,CAAA,CAAA,EAAsB,EAAA,GAAA,EAAA,CAAA,IAAA,EAAjD,EAAiD,CAAA,EAAA,CAAA,IAAjD,EAAiD,EAAA,GAAA,EAAA,CAAA,IAAA,EAAjD,EAAmD;QAAxC,IAAA,EAAA,GAAA,MAAA,CAAA,EAAA,CAAA,KAAA,EAAA,CAAA,CAAA;QAAA,IAAC,GAAG,GAAA,EAAA,CAAA,CAAA,CAAJ;QAAA,IAAM,KAAK,GAAA,EAAA,CAAA,CAAA,CAAX;;QACT,IAAI,IAAI,KAAK,EAAb,EAAiB;UACf,IAAI,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,EAAP,CAAU,iBAAA,CAAA,WAAV,CAAJ,EAA4B;YAC1B,MAAM,IAAI,KAAJ,CAAa,GAAG,GAAA,oCAAH,GAAwC,KAArD,CAAN;UACD;QACF,CAJD,MAIO,IAAI,IAAI,KAAK,GAAb,EAAkB;UACvB,IAAI,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,GAAP,CAAW,iBAAA,CAAA,UAAX,CAAJ,EAA4B;YAC1B,MAAM,IAAI,KAAJ,CAAa,GAAG,GAAA,kCAAH,GAAsC,KAAnD,CAAN;UACD;QACF,CAJM,MAIA;UACL,MAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;QACD;MACF;;;;;;;;;;;;EACF,CAdS;;EAeZ,OAAA,eAAA;AAAC,CA/VD,EAAA;;AAAsB,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseTransaction = void 0;\nvar common_1 = __importStar(require(\"@ethereumjs/common\"));\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar types_1 = require(\"./types\");\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nvar BaseTransaction = /** @class */ (function () {\n    function BaseTransaction(txData) {\n        this.cache = {\n            hash: undefined,\n        };\n        /**\n         * List of tx type defining EIPs,\n         * e.g. 1559 (fee market) and 2930 (access lists)\n         * for FeeMarketEIP1559Transaction objects\n         */\n        this.activeCapabilities = [];\n        /**\n         * The default chain the tx falls back to if no Common\n         * is provided and if the chain can't be derived from\n         * a passed in chainId (only EIP-2718 typed txs) or\n         * EIP-155 signature (legacy txs).\n         *\n         * @hidden\n         */\n        this.DEFAULT_CHAIN = common_1.Chain.Mainnet;\n        /**\n         * The default HF if the tx type is active on that HF\n         * or the first greater HF where the tx is active.\n         *\n         * @hidden\n         */\n        this.DEFAULT_HARDFORK = common_1.Hardfork.Istanbul;\n        var nonce = txData.nonce, gasLimit = txData.gasLimit, to = txData.to, value = txData.value, data = txData.data, v = txData.v, r = txData.r, s = txData.s, type = txData.type;\n        this._type = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(type)).toNumber();\n        var toB = (0, ethereumjs_util_1.toBuffer)(to === '' ? '0x' : to);\n        var vB = (0, ethereumjs_util_1.toBuffer)(v === '' ? '0x' : v);\n        var rB = (0, ethereumjs_util_1.toBuffer)(r === '' ? '0x' : r);\n        var sB = (0, ethereumjs_util_1.toBuffer)(s === '' ? '0x' : s);\n        this.nonce = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(nonce === '' ? '0x' : nonce));\n        this.gasLimit = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(gasLimit === '' ? '0x' : gasLimit));\n        this.to = toB.length > 0 ? new ethereumjs_util_1.Address(toB) : undefined;\n        this.value = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(value === '' ? '0x' : value));\n        this.data = (0, ethereumjs_util_1.toBuffer)(data === '' ? '0x' : data);\n        this.v = vB.length > 0 ? new ethereumjs_util_1.BN(vB) : undefined;\n        this.r = rB.length > 0 ? new ethereumjs_util_1.BN(rB) : undefined;\n        this.s = sB.length > 0 ? new ethereumjs_util_1.BN(sB) : undefined;\n        this._validateCannotExceedMaxInteger({\n            nonce: this.nonce,\n            gasLimit: this.gasLimit,\n            value: this.value,\n            r: this.r,\n            s: this.s,\n        });\n    }\n    Object.defineProperty(BaseTransaction.prototype, \"transactionType\", {\n        /**\n         * Alias for {@link BaseTransaction.type}\n         *\n         * @deprecated Use `type` instead\n         */\n        get: function () {\n            return this.type;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BaseTransaction.prototype, \"type\", {\n        /**\n         * Returns the transaction type.\n         *\n         * Note: legacy txs will return tx type `0`.\n         */\n        get: function () {\n            return this._type;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Checks if a tx type defining capability is active\n     * on a tx, for example the EIP-1559 fee market mechanism\n     * or the EIP-2930 access list feature.\n     *\n     * Note that this is different from the tx type itself,\n     * so EIP-2930 access lists can very well be active\n     * on an EIP-1559 tx for example.\n     *\n     * This method can be useful for feature checks if the\n     * tx type is unknown (e.g. when instantiated with\n     * the tx factory).\n     *\n     * See `Capabilites` in the `types` module for a reference\n     * on all supported capabilities.\n     */\n    BaseTransaction.prototype.supports = function (capability) {\n        return this.activeCapabilities.includes(capability);\n    };\n    BaseTransaction.prototype.validate = function (stringError) {\n        if (stringError === void 0) { stringError = false; }\n        var errors = [];\n        if (this.getBaseFee().gt(this.gasLimit)) {\n            errors.push(\"gasLimit is too low. given \" + this.gasLimit + \", need at least \" + this.getBaseFee());\n        }\n        if (this.isSigned() && !this.verifySignature()) {\n            errors.push('Invalid Signature');\n        }\n        return stringError ? errors : errors.length === 0;\n    };\n    /**\n     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n     */\n    BaseTransaction.prototype.getBaseFee = function () {\n        var fee = this.getDataFee().addn(this.common.param('gasPrices', 'tx'));\n        if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n            fee.iaddn(this.common.param('gasPrices', 'txCreation'));\n        }\n        return fee;\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    BaseTransaction.prototype.getDataFee = function () {\n        var txDataZero = this.common.param('gasPrices', 'txDataZero');\n        var txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n        var cost = 0;\n        for (var i = 0; i < this.data.length; i++) {\n            this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);\n        }\n        return new ethereumjs_util_1.BN(cost);\n    };\n    /**\n     * If the tx's `to` is to the creation address\n     */\n    BaseTransaction.prototype.toCreationAddress = function () {\n        return this.to === undefined || this.to.buf.length === 0;\n    };\n    BaseTransaction.prototype.isSigned = function () {\n        var _a = this, v = _a.v, r = _a.r, s = _a.s;\n        if (this.type === 0) {\n            if (!v || !r || !s) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        else {\n            if (v === undefined || !r || !s) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n    };\n    /**\n     * Determines if the signature is valid\n     */\n    BaseTransaction.prototype.verifySignature = function () {\n        try {\n            // Main signature verification is done in `getSenderPublicKey()`\n            var publicKey = this.getSenderPublicKey();\n            return (0, ethereumjs_util_1.unpadBuffer)(publicKey).length !== 0;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n    /**\n     * Returns the sender's address\n     */\n    BaseTransaction.prototype.getSenderAddress = function () {\n        return new ethereumjs_util_1.Address((0, ethereumjs_util_1.publicToAddress)(this.getSenderPublicKey()));\n    };\n    /**\n     * Signs a transaction.\n     *\n     * Note that the signed tx is returned as a new object,\n     * use as follows:\n     * ```javascript\n     * const signedTx = tx.sign(privateKey)\n     * ```\n     */\n    BaseTransaction.prototype.sign = function (privateKey) {\n        if (privateKey.length !== 32) {\n            throw new Error('Private key must be 32 bytes in length.');\n        }\n        // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n        // and want to recreate a signature (where EIP155 should be applied)\n        // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n        // 2021-06-23\n        var hackApplied = false;\n        if (this.type === 0 &&\n            this.common.gteHardfork('spuriousDragon') &&\n            !this.supports(types_1.Capability.EIP155ReplayProtection)) {\n            this.activeCapabilities.push(types_1.Capability.EIP155ReplayProtection);\n            hackApplied = true;\n        }\n        var msgHash = this.getMessageToSign(true);\n        var _a = (0, ethereumjs_util_1.ecsign)(msgHash, privateKey), v = _a.v, r = _a.r, s = _a.s;\n        var tx = this._processSignature(v, r, s);\n        // Hack part 2\n        if (hackApplied) {\n            var index = this.activeCapabilities.indexOf(types_1.Capability.EIP155ReplayProtection);\n            if (index > -1) {\n                this.activeCapabilities.splice(index, 1);\n            }\n        }\n        return tx;\n    };\n    /**\n     * Does chain ID checks on common and returns a common\n     * to be used on instantiation\n     * @hidden\n     *\n     * @param common - {@link Common} instance from tx options\n     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n     */\n    BaseTransaction.prototype._getCommon = function (common, chainId) {\n        var _a;\n        // Chain ID provided\n        if (chainId) {\n            var chainIdBN = new ethereumjs_util_1.BN((0, ethereumjs_util_1.toBuffer)(chainId));\n            if (common) {\n                if (!common.chainIdBN().eq(chainIdBN)) {\n                    throw new Error('The chain ID does not match the chain ID of Common');\n                }\n                // Common provided, chain ID does match\n                // -> Return provided Common\n                return common.copy();\n            }\n            else {\n                if (common_1.default.isSupportedChainId(chainIdBN)) {\n                    // No Common, chain ID supported by Common\n                    // -> Instantiate Common with chain ID\n                    return new common_1.default({ chain: chainIdBN, hardfork: this.DEFAULT_HARDFORK });\n                }\n                else {\n                    // No Common, chain ID not supported by Common\n                    // -> Instantiate custom Common derived from DEFAULT_CHAIN\n                    return common_1.default.forCustomChain(this.DEFAULT_CHAIN, {\n                        name: 'custom-chain',\n                        networkId: chainIdBN,\n                        chainId: chainIdBN,\n                    }, this.DEFAULT_HARDFORK);\n                }\n            }\n        }\n        else {\n            // No chain ID provided\n            // -> return Common provided or create new default Common\n            return ((_a = common === null || common === void 0 ? void 0 : common.copy()) !== null && _a !== void 0 ? _a : new common_1.default({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK }));\n        }\n    };\n    BaseTransaction.prototype._validateCannotExceedMaxInteger = function (values, bits) {\n        var e_1, _a;\n        if (bits === void 0) { bits = 53; }\n        try {\n            for (var _b = __values(Object.entries(values)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];\n                if (bits === 53) {\n                    if (value === null || value === void 0 ? void 0 : value.gt(ethereumjs_util_1.MAX_INTEGER)) {\n                        throw new Error(key + \" cannot exceed MAX_INTEGER, given \" + value);\n                    }\n                }\n                else if (bits === 256) {\n                    if (value === null || value === void 0 ? void 0 : value.gte(ethereumjs_util_1.TWO_POW256)) {\n                        throw new Error(key + \" must be less than 2^256, given \" + value);\n                    }\n                }\n                else {\n                    throw new Error('unimplemented bits value');\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    return BaseTransaction;\n}());\nexports.BaseTransaction = BaseTransaction;\n//# sourceMappingURL=baseTransaction.js.map"]},"metadata":{},"sourceType":"script"}